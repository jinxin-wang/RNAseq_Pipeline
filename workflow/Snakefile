import os

configfile: "config/config.json"

SAMPLES,PAIRED_OR_SINGLE_END = glob_wildcards("fastq/{samples,.+}_{paired_or_single_end,[01]}.fastq.gz")
FASTQ_SAMPLES, = glob_wildcards("fastq/{name}.fastq.gz")

rule all:
    input : 
        expand("bam/{sample}.bam", sample = SAMPLES),
        expand('fastq_QC/{fastq_sample}_fastqc.html', fastq_sample=FASTQ_SAMPLES),
        expand('fastq_QC_clean/{fastq_sample}_fastqc.html', fastq_sample=FASTQ_SAMPLES),
        expand("mapping_QC/{sample}_flagstat.txt", sample=SAMPLES),
        expand('HTSeq_geneNAME_count/{sample}_geneNAME_count.table', sample=SAMPLES),
        expand('HTSeq_transcriptNAME_count/{sample}_transcriptNAME_count.table', sample=SAMPLES),
        expand('HTSeq_geneID_count/{sample}_geneID_count.table', sample=SAMPLES),
        expand('HTSeq_transcriptID_count/{sample}_transcriptID_count.table', sample=SAMPLES),
        expand("rseqc_geneBody_coverage/{sample}.geneBodyCoverage.curves.pdf", sample=SAMPLES),
        expand('rseqc_tin/{sample}.tin.xls', sample=SAMPLES),
        expand('rseqc_read_duplication/{sample}.DupRate_plot.pdf', sample=SAMPLES),
        expand('kallisto_targetID_count/{sample}/abundance.tsv', sample=SAMPLES),

## fastq quality control
include: "rules/fastqc.smk"

## clean fastq files 
include: "rules/fastp.smk"

## map RNA samples
include: "rules/star.smk"

## generate bam index 
include: "rules/index_bam"

## check mapping metrics 
include: "rules/chk_mapping_metrics.smk"

if config["SPECIES"] == "Humain":
    include: "rules/mapping_coverage.smk"

if config["SPECIES"] == "Humain":
    include: "rules/chk_tran_int_num.smk"

include: "rules/quantify_reads.smk"

include: "rules/kallisto.smk"

